# during to work, all containers have internal lan, and have DNS names like their names. So you can to connect to container directly by his DNS name
# So you can connect to php container to port 9000 from another container with "php:9000" (see nginx site config for example) because this container has DNS name "php"
version: "3.7"

services:

  nginx:
    image: nginx:mainline-alpine
    container_name: ${APPNAME}_nginx
    ports:
    - 80:80
    #      - 443:443
    volumes:
    - ./..:${SITE_WORKDIR_IN_CONTAINER}
    - ./nginx/logs:/var/log/nginx # you can find logs - ./nginx/logs
    - ./nginx/site.conf:/etc/nginx/conf.d/site.conf # local site configuration
    - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
    - php

  php:
    container_name: ${APPNAME}_php
    build:
      context: ./php
      args:
        workdir: ${SITE_WORKDIR_IN_CONTAINER}
        php_modules_list: ${NEEDED_PHP_MODULES}
    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
    volumes:
    - ./..:${SITE_WORKDIR_IN_CONTAINER}
    - ./php/php.ini:/etc/php/fpm/php.ini
    - ./php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
    links:
      - db

  # you can connect to mysql from php code or from another container with "db:3306" because this container has DNS name "db"
  db:
    image: mysql:${MYSQL_VERSION}
    container_name: ${APPNAME}_mysql
    ports:
    - 3306:3306
    volumes:
    - ./database/db_file:/var/lib/mysql
    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
    environment:
    - MYSQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
    - MYSQL_DATABASE=${SQL_DATABASE}
    - MYSQL_USER=${SQL_USER}
    - MYSQL_PASSWORD=${SQL_PASSWORD}
    restart: always

